import cv2
import numpy as np
import matplotlib.pyplot as plt


def detect_edges(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)
    return edges


def hough_accumulator(edges):
    height, width = edges.shape
    theta_range = np.deg2rad(np.arange(-90, 90, 1))  # Theta from -90 to 89 degrees
    diag_len = int(np.sqrt(height ** 2 + width ** 2))  # Maximum rho value
    rho_range = np.arange(-diag_len, diag_len, 1)

    accumulator = np.zeros((len(rho_range), len(theta_range)), dtype=np.int32)

    edge_points = np.argwhere(edges)  # Get (y, x) coordinates of edges

    for y, x in edge_points:
        for theta_idx, theta in enumerate(theta_range):
            rho = int(x * np.cos(theta) + y * np.sin(theta))
            rho_idx = np.where(rho_range == rho)[0][0]  # Map rho to accumulator index
            accumulator[rho_idx, theta_idx] += 1  # Vote

    return accumulator, rho_range, theta_range


def plot_accumulator(accumulator):
    plt.figure(figsize=(10, 6))
    plt.imshow(accumulator, cmap='hot', aspect='auto')
    plt.colorbar(label='Votes')
    plt.xlabel("Theta (degrees)")
    plt.ylabel("Rho (pixels)")
    plt.title("Hough Transform Accumulator")
    plt.show()


# Load and process image
image_path = r''  # Replace with actual image path
image = cv2.imread(image_path)
edges = detect_edges(image)
accumulator, rho_range, theta_range = hough_accumulator(edges)

# Display Accumulator
plot_accumulator(accumulator)
